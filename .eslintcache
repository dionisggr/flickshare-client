[{"C:\\Users\\diolo\\www\\react-template\\src\\index.js":"1","C:\\Users\\diolo\\www\\react-template\\src\\App.js":"2","C:\\Users\\diolo\\www\\flickshare-client\\src\\index.js":"3","C:\\Users\\diolo\\www\\flickshare-client\\src\\App.js":"4","C:\\Users\\diolo\\www\\flickshare-client\\src\\Header.js":"5","C:\\Users\\diolo\\www\\flickshare-client\\src\\Footer.js":"6","C:\\Users\\diolo\\www\\flickshare-client\\src\\Welcome.js":"7","C:\\Users\\diolo\\www\\flickshare-client\\src\\Login.js":"8","C:\\Users\\diolo\\www\\flickshare-client\\src\\Register.js":"9","C:\\Users\\diolo\\www\\flickshare-client\\src\\api.js":"10","C:\\Users\\diolo\\www\\flickshare-client\\src\\Error.js":"11","C:\\Users\\diolo\\www\\flickshare-client\\src\\ListPreview.js":"12","C:\\Users\\diolo\\www\\flickshare-client\\src\\MoviePreview.js":"13","C:\\Users\\diolo\\www\\flickshare-client\\src\\MovieOptions.js":"14","C:\\Users\\diolo\\www\\flickshare-client\\src\\config.js":"15","C:\\Users\\diolo\\www\\flickshare-client\\src\\Movie.js":"16","C:\\Users\\diolo\\www\\flickshare-client\\src\\User.js":"17","C:\\Users\\diolo\\www\\flickshare-client\\src\\UserEdit.js":"18","C:\\Users\\diolo\\www\\flickshare-client\\src\\MainMenu.js":"19","C:\\Users\\diolo\\www\\flickshare-client\\src\\Lists.js":"20","C:\\Users\\diolo\\www\\flickshare-client\\src\\List.js":"21","C:\\Users\\diolo\\www\\flickshare-client\\src\\MovieSearch.js":"22","C:\\Users\\diolo\\www\\flickshare-client\\src\\services\\movie-service.js":"23","C:\\Users\\diolo\\www\\flickshare-client\\src\\services\\validation.js":"24","C:\\Users\\diolo\\www\\flickshare-client\\src\\Suggestions.js":"25"},{"size":171,"mtime":1611252467376,"results":"26","hashOfConfig":"27"},{"size":202,"mtime":1611252349029,"results":"28","hashOfConfig":"27"},{"size":270,"mtime":1613365713205,"results":"29","hashOfConfig":"30"},{"size":4613,"mtime":1613754364392,"results":"31","hashOfConfig":"30"},{"size":1443,"mtime":1613686306794,"results":"32","hashOfConfig":"30"},{"size":171,"mtime":1613368797868,"results":"33","hashOfConfig":"30"},{"size":1255,"mtime":1613597697497,"results":"34","hashOfConfig":"30"},{"size":1608,"mtime":1613678695292,"results":"35","hashOfConfig":"30"},{"size":3765,"mtime":1613694713300,"results":"36","hashOfConfig":"30"},{"size":4316,"mtime":1613756042948,"results":"37","hashOfConfig":"30"},{"size":379,"mtime":1613757125992,"results":"38","hashOfConfig":"30"},{"size":2913,"mtime":1613785624253,"results":"39","hashOfConfig":"30"},{"size":822,"mtime":1613775565123,"results":"40","hashOfConfig":"30"},{"size":553,"mtime":1613774478822,"results":"41","hashOfConfig":"30"},{"size":475,"mtime":1613710073089,"results":"42","hashOfConfig":"30"},{"size":1765,"mtime":1613698357269,"results":"43","hashOfConfig":"30"},{"size":2412,"mtime":1613752453032,"results":"44","hashOfConfig":"30"},{"size":3114,"mtime":1613640728074,"results":"45","hashOfConfig":"30"},{"size":831,"mtime":1613694600940,"results":"46","hashOfConfig":"30"},{"size":1631,"mtime":1613751295075,"results":"47","hashOfConfig":"30"},{"size":3044,"mtime":1613773032663,"results":"48","hashOfConfig":"30"},{"size":1399,"mtime":1613697656352,"results":"49","hashOfConfig":"30"},{"size":637,"mtime":1613697559869,"results":"50","hashOfConfig":"30"},{"size":1169,"mtime":1613694711827,"results":"51","hashOfConfig":"30"},{"size":1748,"mtime":1613761905105,"results":"52","hashOfConfig":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jr9xs2",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1fglsoy",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"59"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"C:\\Users\\diolo\\www\\react-template\\src\\index.js",[],"C:\\Users\\diolo\\www\\react-template\\src\\App.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\index.js",[],["110","111"],"C:\\Users\\diolo\\www\\flickshare-client\\src\\App.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\Header.js",["112"],"import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { JWT_SECRET } from './config';\r\nimport MainMenu from './MainMenu';\r\nimport jwt from 'jsonwebtoken';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n  static defaultProps = { loggedIn: false };\r\n\r\n  logout = () => {\r\n    const { userLogged } = this.props;\r\n\r\n    userLogged(false);\r\n    \r\n    window.localStorage.removeItem('flickshareToken');\r\n  };\r\n\r\n  render() {\r\n    const flickshareToken = JSON.parse(window.localStorage.getItem('flickshareToken'));\r\n    \r\n    const decoded = (flickshareToken)\r\n      ? jwt.verify(flickshareToken, JWT_SECRET, (error, decoded) => {\r\n          if (error) return null;\r\n          return decoded;\r\n        })\r\n      : null;\r\n    \r\n    const redirect = (decoded) ? '/home' : '/';\r\n\r\n    const buttons = (decoded)\r\n      ? <>\r\n        <li><Link to={`/users/${decoded.user_id}`}>Account</Link></li>\r\n        <li>\r\n          <Link to='/'\r\n            onClick={this.logout}>Logout\r\n          </Link>\r\n        </li>\r\n      </>\r\n      : <>\r\n        <li><Link to='/register'>Register</Link></li>\r\n        <li><Link to='/login'>Login</Link></li>\r\n      </>;\r\n    \r\n    return (\r\n      <header>\r\n        <h1><Link to={redirect}>FlickShare</Link></h1>\r\n        <nav>\r\n          <ul>\r\n            {buttons}\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    )\r\n  };\r\n};\r\n\r\nexport default withRouter(Header);","C:\\Users\\diolo\\www\\flickshare-client\\src\\Footer.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\Welcome.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\Login.js",["113","114"],"import React from 'react';\r\nimport { JWT_SECRET } from './config';\r\nimport jwt from 'jsonwebtoken';\r\nimport Error from './Error';\r\nimport api from './api';\r\nimport './Login.css';\r\n\r\nclass Login extends React.Component {\r\n  login = async (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const username = evt.target.username.value;\r\n    const password = evt.target.password.value;\r\n\r\n    const { history, userLogged, setUserLists } = this.props;\r\n\r\n    const { flickshareToken } = await api.login(username, password)\r\n      .catch(error => <Error message={error} />);\r\n    \r\n    const decoded = (flickshareToken)\r\n      ? jwt.verify(flickshareToken, JWT_SECRET, (error, decoded) => {\r\n          if (error) return null;\r\n          return decoded;\r\n        })\r\n      : null;\r\n    \r\n    const user_id = (decoded) ? decoded.user_id : null;\r\n\r\n    const userLists = await api.getUserLists(user_id)\r\n      .catch(error => <Error message={error} />);\r\n    \r\n    window.localStorage.setItem('flickshareToken', JSON.stringify(flickshareToken));\r\n\r\n    userLogged(true);\r\n\r\n    history.push('/home');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className='login' onSubmit={this.login}>\r\n        <h3>LOGIN</h3>\r\n        <label htmlFor='username'>Username</label>\r\n        <input\r\n          type='text' required\r\n          name='username' id='username'\r\n        />\r\n        <label htmlFor='password'>Password</label>\r\n        <input\r\n          type='text' required\r\n          name='password' id='password'\r\n        />\r\n        <button type='submit'>Submit</button>\r\n      </form>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Login;","C:\\Users\\diolo\\www\\flickshare-client\\src\\Register.js",["115"],"import React from 'react';\r\nimport Error from './Error';\r\nimport validation from './helpers/validation';\r\nimport api from './api';\r\nimport './Register.css';\r\n\r\nclass Register extends React.Component {\r\n\r\n  addUser = async (evt) => {\r\n    evt.preventDefault();\r\n\r\n    evt.target.querySelectorAll('label.error').forEach(label => {\r\n      label.style.display = 'none';\r\n    });\r\n\r\n    const { history, userLogged } = this.props;\r\n\r\n    const newUser = {\r\n      first_name: evt.target.first_name.value,\r\n      last_name: evt.target.last_name.value,\r\n      username: evt.target.username.value,\r\n      email: evt.target.email.value,\r\n      password: evt.target.password.value,\r\n      repeat_password: evt.target.repeat_password.value,\r\n    };\r\n\r\n    const usernameExists = await validation.validUsername(newUser);\r\n\r\n    if (usernameExists) {\r\n      return evt.target.querySelector('#error_username').style.display = 'block';\r\n    };\r\n\r\n    const validPassword = await validation.validPassword(newUser, evt);\r\n\r\n    if (!validPassword) {\r\n      return;\r\n    }\r\n\r\n    delete newUser.repeat_password;\r\n\r\n    for (const [key, value] of Object.entries(newUser)) {\r\n      if (!value && key !== 'repeat_password') {\r\n        return evt.target.querySelector(`#error_${key}`).style.display = 'block';\r\n      };\r\n    };\r\n\r\n    newUser.admin = false;\r\n\r\n    api.addUser(newUser)\r\n      .then(({ flickshareToken }) => {\r\n        window.localStorage.setItem('flickshareToken', JSON.stringify(flickshareToken));\r\n        userLogged(true);\r\n        history.push(`/home`);\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.scroll(0,0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className='register'\r\n        autoComplete='off'\r\n        onSubmit={this.addUser}\r\n      >\r\n        <h3>REGISTER</h3>\r\n\r\n        <label htmlFor='first_name'>First Name:</label>\r\n        <input\r\n          type='text' required\r\n          name='first_name' id='first_name'\r\n        />\r\n\r\n        <label htmlFor='last_name'>Last Name:</label>\r\n        <input \r\n          type='text' required\r\n          name='last_name' id='last_name'\r\n        />\r\n\r\n        <label htmlFor='email'>E-mail:</label>\r\n        <input \r\n          type='text' required\r\n          name='email' id='email'\r\n        />\r\n\r\n        <label htmlFor='username'>Username:</label>\r\n        <input \r\n          type='text' required\r\n          name='username' id='username'\r\n        />\r\n        <label\r\n          htmlFor='username'\r\n          id='error_username'\r\n          className='error'\r\n          style={{ display: 'none' }}\r\n        >\r\n          <p>Username exists.</p>\r\n        </label>\r\n\r\n        <label htmlFor='password'>Password</label>\r\n        <input \r\n          type='text' required\r\n          name='password' id='password'\r\n        />\r\n        <label\r\n          htmlFor='password'\r\n          id='error_password'\r\n          className='error'\r\n          style={{ display: 'none' }}\r\n        >\r\n          <p>Password must be at least 8 charaters.</p>\r\n          <p>Password must not contain spaces.</p>\r\n          <p>Password must contain at least 1 Uppercase.</p>\r\n          <p>Password must contain at least 1 number.</p>\r\n        </label>\r\n      \r\n        <label htmlFor='repeat_password'>Repeat password:</label>\r\n        <input \r\n          type='text' required\r\n          name='repeat_password' id='repeat_password'\r\n        />\r\n        <label\r\n          htmlFor='password'\r\n          id='error_repeat_password'\r\n          className='error'\r\n          style={{ display: 'none' }}\r\n        >\r\n          <p>Passwords must match.</p>\r\n        </label>\r\n      \r\n        <button type='submit'>Submit</button>\r\n      </form>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Register;","C:\\Users\\diolo\\www\\flickshare-client\\src\\api.js",["116"],"import { API_URL, API_ADMIN_KEY, TMDB_API_URL, TMDB_API_KEY } from './config';\r\nimport Error from './Error';\r\nimport MovieService from './services/movie-service';\r\n\r\nconst api = {\r\n  verifyResponse: (res) => {\r\n    if (!res.ok) throw new Error('Could not request.');\r\n    return res.json();\r\n  }\r\n  ,\r\n  searchMovie: (movie) => {\r\n    const searchOptions = '&page=1&include_adult=false';\r\n    movie = encodeURIComponent(movie);\r\n    \r\n    return fetch(\r\n      `${TMDB_API_URL}/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${movie}${searchOptions}`\r\n    )\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  getMainLists: () => {\r\n    return fetch(`${API_URL}/lists/main`, {\r\n      headers: { 'Authorization': `Bearer ${API_ADMIN_KEY}` }\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  getListById: (id) => {\r\n    return fetch(`${API_URL}/lists/${id}`, {\r\n      headers: { 'Authorization': `Bearer ${API_ADMIN_KEY}` }\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  createList: (list) => {\r\n    return fetch(`${API_URL}/lists`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${API_ADMIN_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(list)\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  addMovieToList: (list_id, movie) => {\r\n    return fetch(`${API_URL}/movies/lists/${list_id}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${API_ADMIN_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(movie)\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  getUserInfo: (user_id) => {\r\n    return fetch(`${API_URL}/users/${user_id}`, {\r\n      headers: { 'Authorization': `Bearer ${API_ADMIN_KEY}` }\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  getUserLists: (user_id) => {\r\n    return fetch(`${API_URL}/lists/users/${user_id}`, {\r\n      headers: { 'Authorization': `Bearer ${API_ADMIN_KEY}` }\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  getUserSuggestions: (user_id) => {\r\n    return fetch(`${API_URL}/lists/suggestions/users/${user_id}`, {\r\n      headers: { 'Authorization': `Bearer ${API_ADMIN_KEY}` }\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  addUser: (user) => {\r\n    return fetch(`${API_URL}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${API_ADMIN_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(user)\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  editUser: (user_id, values) => {\r\n    return fetch(`${API_URL}/users/${user_id}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Authorization': `Bearer ${API_ADMIN_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(values)\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  deleteUser: (user_id) => {\r\n    return fetch(`${API_URL}/users/${user_id}`, {\r\n      method: 'DELETE',\r\n      headers: { 'Authorization': `Bearer ${API_ADMIN_KEY}` }\r\n    });\r\n  }\r\n  ,\r\n  usernameExists: (username) => {\r\n    return fetch(`${API_URL}/users/username`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${API_ADMIN_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username })\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  login: (username, password) => {\r\n    return fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${API_ADMIN_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username, password })\r\n    })\r\n      .then(api.verifyResponse);\r\n  }\r\n  ,\r\n  getMovieSuggestions: (tmdb_id) => {\r\n    const searchOptions = '&page=1&include_adult=false';\r\n    return fetch(\r\n      `${TMDB_API_URL}/movie/${tmdb_id}/similar?api_key=${TMDB_API_KEY}${searchOptions}`\r\n    )\r\n  }\r\n  ,\r\n  getMoviesSuggestions: (movies) => {\r\n    return Promise.all(movies.map(movie => {\r\n      return api.getMovieSuggestions(movie.tmdb_id)\r\n    }))\r\n      .then(response => Promise.all(response.map(res => {\r\n        if (!res.ok) throw new Error('Invalid request.');\r\n        return res.json();\r\n      })))\r\n      .catch(error => <Error message={error} />);\r\n  }\r\n};\r\n\r\nexport default api;","C:\\Users\\diolo\\www\\flickshare-client\\src\\Error.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\ListPreview.js",["117","118"],"C:\\Users\\diolo\\www\\flickshare-client\\src\\MoviePreview.js",["119","120"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MovieOptions from './MovieOptions';\r\nimport './MoviePreview.css';\r\n\r\nclass MoviePreview extends React.Component {\r\n  state = { showOptions: false };\r\n\r\n  render() {\r\n    const { movie } = this.props;\r\n    const { name, poster, movie_id } = movie;\r\n\r\n    const movieOptions = (this.state.showOptions)\r\n      ? <MovieOptions movie={movie} />\r\n      : null\r\n    \r\n    return (\r\n      <div\r\n        className='movie-preview'\r\n        onMouseEnter={() => this.setState({ showOptions: true })}\r\n        onMouseLeave={() => this.setState({ showOptions: false })}\r\n      >\r\n        <label>{name}</label>\r\n\r\n        <img src={poster} alt={`${name} poster`} />\r\n      \r\n        {movieOptions}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MoviePreview;","C:\\Users\\diolo\\www\\flickshare-client\\src\\MovieOptions.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\config.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\Movie.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\User.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\UserEdit.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\MainMenu.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\Lists.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\List.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\MovieSearch.js",["121"],"import React from 'react';\r\nimport Movie from './Movie';\r\nimport Error from './Error';\r\nimport api from './api';\r\nimport MovieService from './services/movie-service';\r\nimport './MovieSearch.css';\r\n\r\nclass MovieSearch extends React.Component {\r\n  state = { results: [] };\r\n\r\n  search = async (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const movie = evt.target.movie_input.value;\r\n\r\n    const response = await api.searchMovie(movie)\r\n      .catch(error => <Error message={error} />);\r\n    \r\n    const results = MovieService.prepare(response.results);\r\n\r\n    console.log(this.state.results);\r\n    this.setState({ results });\r\n    console.log(this.state.results);\r\n  };\r\n\r\n  render() {\r\n    const { results } = this.state;\r\n\r\n    console.log(this.state.results);\r\n\r\n    return (\r\n      <div className='movie-search'>\r\n        <form\r\n          className='search'\r\n          onSubmit={this.search}\r\n        >\r\n          <h3>Movie Search</h3>\r\n          <input\r\n            type='text'\r\n            id='movie_input'\r\n            name='movie_input'\r\n            placeholder='Search...'\r\n          />\r\n          <button type='submit'>Search</button>\r\n        </form>\r\n        <div className='results'>\r\n          {\r\n            this.state.results.map(movie => \r\n              <Movie movie={movie} />\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default MovieSearch;","C:\\Users\\diolo\\www\\flickshare-client\\src\\services\\movie-service.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\services\\validation.js",[],"C:\\Users\\diolo\\www\\flickshare-client\\src\\Suggestions.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":16},{"ruleId":"126","severity":1,"message":"130","line":15,"column":34,"nodeType":"128","messageId":"129","endLine":15,"endColumn":46},{"ruleId":"126","severity":1,"message":"131","line":29,"column":11,"nodeType":"128","messageId":"129","endLine":29,"endColumn":20},{"ruleId":"126","severity":1,"message":"132","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":13},{"ruleId":"126","severity":1,"message":"133","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":20},{"ruleId":"126","severity":1,"message":"134","line":66,"column":11,"nodeType":"128","messageId":"129","endLine":66,"endColumn":18},{"ruleId":"126","severity":1,"message":"135","line":67,"column":11,"nodeType":"128","messageId":"129","endLine":67,"endColumn":16},{"ruleId":"126","severity":1,"message":"136","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":14},{"ruleId":"126","severity":1,"message":"137","line":11,"column":27,"nodeType":"128","messageId":"129","endLine":11,"endColumn":35},{"ruleId":"126","severity":1,"message":"138","line":27,"column":13,"nodeType":"128","messageId":"129","endLine":27,"endColumn":20},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'MainMenu' is defined but never used.","Identifier","unusedVar","'setUserLists' is assigned a value but never used.","'userLists' is assigned a value but never used.","'Error' is defined but never used.","'MovieService' is defined but never used.","'user_id' is assigned a value but never used.","'admin' is assigned a value but never used.","'Link' is defined but never used.","'movie_id' is assigned a value but never used.","'results' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]